name: test workflow
description: This workflow is for testing

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Specify the branch to run the workflow on'
        required: true
        default: 'master'
      pr_branch:
        description: 'Name of the new branch for the documentations PR'
        required: true

jobs:
  Document-Generator:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_name }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Creating tmp directory /tmp
        run: |
          mkdir -p /tmp/bots_generated_docs
          touch /tmp/bots_generated_docs/testa.txt /tmp/bots_generated_docs/testb.txt
          echo "This is file a" >> /tmp/bots_generated_docs/testa.txt
          echo "This is file b" >> /tmp/bots_generated_docs/testb.txt

      - name: Run PR Creation Script
        env:
          pr_branch: ${{ github.event.inputs.pr_branch }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python <<EOF
          import os
          import requests
          import base64

          # Input parameters
          pr_title = 'bot documentation'
          pr_body = 'This PR is generated by an automated document generator.'
          pr_branch = os.getenv('pr_branch')
          base_branch = 'master'

          # GitHub API URL and headers
          repo = 'nautiyaldeepak/go-todo-app'
          token = os.getenv('github_token')  # Use GitHub secret

          if not token:
              raise ValueError('GitHub token not found in environment variables')

          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # Function to check if a branch exists
          def check_branch_exists():
              url = f'https://api.github.com/repos/{repo}/git/refs/heads/{pr_branch}'
              response = requests.get(url, headers=headers)
              
              if response.status_code == 200:
                  return True
              elif response.status_code == 404:
                  return False
              else:
                  response.raise_for_status()

          # Function to create a new branch from the base branch
          def create_branch():
              base_branch_url = f'https://api.github.com/repos/{repo}/git/refs/heads/{base_branch}'
              base_response = requests.get(base_branch_url, headers=headers)
              base_response.raise_for_status()
              base_sha = base_response.json()['object']['sha']
              
              create_branch_url = f'https://api.github.com/repos/{repo}/git/refs'
              data = {
                  'ref': f'refs/heads/{pr_branch}',
                  'sha': base_sha
              }
              
              response = requests.post(create_branch_url, json=data, headers=headers)
              response.raise_for_status()
              return response.json()

          # Function to upload a file to the GitHub repository
          def upload_file_to_github(file_path, repo_path):
              with open(file_path, 'rb') as file:
                  content = base64.b64encode(file.read()).decode('utf-8')

              url = f'https://api.github.com/repos/{repo}/contents/{repo_path}'
              data = {
                  'message': f'Add {repo_path}',
                  'content': content,
                  'branch': pr_branch
              }
              
              response = requests.put(url, headers=headers, json=data)
              response.raise_for_status()  # Raise an error for bad responses
              return response.json()

          def add_directory_to_repo(local_dir, remote_dir):
              for root, _, files in os.walk(local_dir):
                  for file_name in files:
                      full_local_path = os.path.join(root, file_name)
                      # Construct the remote path within the GitHub repo
                      relative_path = os.path.relpath(full_local_path, local_dir)
                      print("remote_dir=" + remote_dir, flush=True)
                      print("relative_path=" + relative_path, flush=True)
                      full_remote_path = os.path.join(remote_dir, relative_path).replace("\\", "/")

                      
                      upload_file_to_github(full_local_path, full_remote_path)
                      print(f"Uploaded {full_remote_path}")

          # Function to check for existing pull requests
          def check_existing_pr():
              url = f'https://api.github.com/repos/{repo}/pulls?state=open&head={repo}:{pr_branch}'
              response = requests.get(url, headers=headers)
              response.raise_for_status()
              return response.json()

          # Function to create a new pull request
          def create_pull_request():
              url = f'https://api.github.com/repos/{repo}/pulls'
              data = {
                  'title': pr_title,
                  'body': pr_body,
                  'head': pr_branch,
                  'base': base_branch
              }
              
              response = requests.post(url, json=data, headers=headers)
              response.raise_for_status()
              return response.json()

          def main():
              try:
                  if not check_branch_exists():
                      print(f'Branch "{pr_branch}" does not exist. Creating branch...')
                      create_branch()
                      print(f'Branch "{pr_branch}" created successfully.')
                  else:
                      print(f'Branch "{pr_branch}" already exists.')

                  # Add directory and its contents to the branch
                  local_directory_path = "/tmp/bots_generated_docs"
                  remote_directory_path = "bots_generated_docs"
                  
                  # Check for existing PR
                  existing_prs = check_existing_pr()
                  if any(pr["title"] == pr_title for pr in existing_prs):
                      print(f'Pull request already exists: {pr_title}')
                  else:
                      add_directory_to_repo(local_directory_path, remote_directory_path)
                      new_pr = create_pull_request()
                      print(f'Pull request created: {new_pr["html_url"]}')
              except requests.exceptions.HTTPError as http_err:
                  print(f'HTTP error occurred: {http_err.response.status_code} - {http_err.response.text}')
              except Exception as e:
                  print(f'An error occurred: {str(e)}')

          if __name__ == "__main__":
              main()
          EOF